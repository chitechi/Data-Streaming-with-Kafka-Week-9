# -*- coding: utf-8 -*-
"""Data Streaming with Kafka.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gX0YzKdfe_EAJzcVfYxmRaMIbdCfzJ8D
"""

import pandas as pd
import matplotlib.pyplot as plt

from kafka import KafkaConsumer
import json

# Create a Kafka consumer instance
consumer = KafkaConsumer('mobile-money-transactions', bootstrap_servers=['localhost:9092'], auto_offset_reset='earliest')

# Read messages from the Kafka cluster and process them
for message in consumer:
    # Convert the message to a JSON object
    data = json.loads(message.value.decode('utf-8'))

# Create a Kafka producer instance
producer = KafkaProducer(bootstrap_servers=['localhost:9092'])

# Define the topic to send messages to
topic = 'mobile-money-transactions'

# Read data from a file and send it to the Kafka cluster
with open('transactions.json', 'r') as f:
    for line in f:
        # Convert each line to a JSON object
        data = json.loads(line)
        # Send the data to the Kafka cluster
        producer.send(topic, value=json.dumps(data).encode('utf-8'))

# Read messages from the Kafka consumer and create a pandas DataFrame
messages = []
for message in consumer:
    data = json.loads(message.value.decode('utf-8'))
    messages.append(data)
df = pd.DataFrame(messages)

# Convert the transaction time to a pandas datetime object
df['transaction_time'] = pd.to_datetime(df['transaction_time'])

# Group the transactions by hour and sum the transaction amounts
grouped = df.groupby(pd.Grouper(key='transaction_time', freq='H'))['transaction_amount'].sum()

# Create a bar chart showing the total transaction amounts by hour
plt.bar(grouped.index, grouped.values)
plt.xlabel('Hour')
plt.ylabel('Total Transaction Amount')
plt.show()

from kafka import KafkaConsumer
import json

# Create a Kafka consumer instance
consumer = KafkaConsumer('mobile-money-transactions', bootstrap_servers=['localhost:9092'], auto_offset_reset='earliest')

# Read messages from the Kafka cluster and process them
for message in consumer:
    # Convert the message to a JSON object
    data = json.loads(message.value.decode('utf-8'))

